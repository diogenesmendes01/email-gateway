name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: email_gateway_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: |
          # Build shared package first
          cd packages/shared && npm run build
          
          # Build database package
          cd ../database && npm run build
          
          # Build worker package (skip tests for now)
          cd ../../apps/worker && npm run build -- --skipLibCheck

      - name: Run tests (shared package)
        run: |
          cd packages/shared && npm test

      - name: Run linting
        run: |
          # Lint shared package
          cd packages/shared && npm run lint || true
          
          # Lint worker package
          cd ../../apps/worker && npm run lint || true

      - name: Check TypeScript compilation
        run: |
          # Check shared package
          cd packages/shared && npx tsc --noEmit
          
          # Check worker package (skip lib check to avoid node_modules issues)
          cd ../../apps/worker && npx tsc --noEmit --skipLibCheck

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          push: false
          tags: email-gateway-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Worker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/worker
          push: false
          tags: email-gateway-worker:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
