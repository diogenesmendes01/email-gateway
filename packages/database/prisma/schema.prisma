// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENUMS
// ============================================

enum EmailStatus {
  PENDING
  ENQUEUED
  RECEIVED      // Pipeline: Job recebido
  VALIDATED     // Pipeline: Validações OK
  SENT_ATTEMPT  // Pipeline: Tentando enviar ao SES
  SENT
  FAILED
  RETRYING
  RETRY_SCHEDULED // Pipeline: Agendado para retry
}

enum EventType {
  CREATED
  ENQUEUED
  RECEIVED        // Pipeline: Job recebido
  VALIDATED       // Pipeline: Validado
  SENT_ATTEMPT    // Pipeline: Tentativa de envio
  PROCESSING
  SENT
  FAILED
  RETRYING
  RETRY_SCHEDULED // Pipeline: Agendado para retry
  BOUNCED
  COMPLAINED
  DELIVERED
  VALIDATION_FAILED // Pipeline: Falha na validação
}

// TASK 6.2: Domain Management Enums
enum DomainVerificationStatus {
  PENDING
  VERIFIED
  FAILED
  TEMPORARY_FAILURE
}

enum DKIMVerificationStatus {
  PENDING
  VERIFIED
  FAILED
}

// ============================================
// MODELS
// ============================================

model Company {
  id        String   @id @default(cuid())
  name      String
  apiKey    String   @unique @map("api_key")
  apiKeyHash String  @unique @map("api_key_hash") @db.VarChar(128)
  apiKeyPrefix String @map("api_key_prefix") @db.VarChar(20)
  apiKeyCreatedAt DateTime @map("api_key_created_at")
  apiKeyExpiresAt DateTime @map("api_key_expires_at")
  lastUsedAt DateTime? @map("last_used_at")
  isActive  Boolean  @default(true) @map("is_active")
  allowedIps String[] @default([]) @map("allowed_ips")
  rateLimitConfig Json? @map("rate_limit_config")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  recipients   Recipient[]
  emailOutbox  EmailOutbox[]
  emailLogs    EmailLog[]
  idempotencyKeys IdempotencyKey[]
  auditLogs   AuditLog[]
  domains     Domain[]

  @@map("companies")
}

model Recipient {
  id            String   @id @default(cuid())
  companyId     String   @map("company_id")
  externalId    String?  @map("external_id")
  cpfCnpjHash   String?  @map("cpf_cnpj_hash") @db.VarChar(64)
  cpfCnpjEnc    String?  @map("cpf_cnpj_enc") // Encrypted CPF/CNPJ
  cpfCnpjSalt   String?  @map("cpf_cnpj_salt") // Salt for encryption
  razaoSocial   String?  @map("razao_social") @db.VarChar(150)
  nome          String?  @db.VarChar(120)
  email         String   @db.VarChar(254)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  // Relations
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  emailOutbox EmailOutbox[]
  emailLogs   EmailLog[]

  @@unique([companyId, externalId])
  @@index([companyId, cpfCnpjHash])
  @@index([companyId, email])
  @@map("recipients")
}

model EmailOutbox {
  id           String      @id @default(cuid())
  companyId    String      @map("company_id")
  recipientId  String?     @map("recipient_id")
  externalId   String?     @map("external_id") @db.VarChar(64)
  to           String      @db.VarChar(254)
  cc           String[]    @default([])
  bcc          String[]    @default([])
  subject      String      @db.VarChar(150)
  html         String      @db.Text
  replyTo      String?     @map("reply_to") @db.VarChar(254)
  headers      Json?
  tags         String[]    @default([])
  status       EmailStatus @default(PENDING)
  jobId        String?     @unique @map("job_id")
  requestId    String?     @map("request_id") @db.VarChar(128)
  attempts     Int         @default(0)
  lastError    String?     @map("last_error") @db.Text
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  enqueuedAt   DateTime?   @map("enqueued_at")
  processedAt  DateTime?   @map("processed_at")

  // Relations
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  recipient Recipient? @relation(fields: [recipientId], references: [id], onDelete: SetNull)
  emailLog  EmailLog?

  @@index([companyId, status])
  @@index([companyId, externalId])
  @@index([companyId, createdAt])
  @@index([recipientId])
  @@map("email_outbox")
}

model EmailLog {
  id            String      @id @default(cuid())
  outboxId      String      @unique @map("outbox_id")
  companyId     String      @map("company_id")
  recipientId   String?     @map("recipient_id")
  to            String      @db.VarChar(254)
  subject       String      @db.VarChar(150)
  status        EmailStatus
  sesMessageId  String?     @unique @map("ses_message_id") @db.VarChar(128)
  errorCode     String?     @map("error_code") @db.VarChar(64)
  errorReason   String?     @map("error_reason") @db.Text
  attempts      Int         @default(0)
  durationMs    Int?        @map("duration_ms")
  requestId     String?     @map("request_id") @db.VarChar(128)
  createdAt     DateTime    @default(now()) @map("created_at")
  sentAt        DateTime?   @map("sent_at")
  failedAt      DateTime?   @map("failed_at")

  // Relations
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  recipient   Recipient?   @relation(fields: [recipientId], references: [id], onDelete: SetNull)
  outbox      EmailOutbox  @relation(fields: [outboxId], references: [id], onDelete: Cascade)
  events      EmailEvent[]

  @@index([companyId, status])
  @@index([companyId, createdAt])
  @@index([recipientId])
  @@index([sesMessageId])
  // TASK 9.2: Sorting indexes for dashboard performance
  @@index([status, createdAt])
  @@index([sentAt])
  @@index([attempts, createdAt])
  @@index([durationMs])
  @@map("email_logs")
}

model EmailEvent {
  id          String    @id @default(cuid())
  emailLogId  String    @map("email_log_id")
  type        EventType
  metadata    Json?
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  emailLog EmailLog @relation(fields: [emailLogId], references: [id], onDelete: Cascade)

  @@index([emailLogId, createdAt])
  @@map("email_events")
}

model IdempotencyKey {
  id         String   @id @default(cuid())
  companyId  String   @map("company_id")
  key        String   @db.VarChar(128)
  outboxId   String   @map("outbox_id")
  requestHash String  @map("request_hash") @db.VarChar(64)
  createdAt  DateTime @default(now()) @map("created_at")
  expiresAt  DateTime @map("expires_at")

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, key])
  @@index([expiresAt])
  @@map("idempotency_keys")
}

model AuditLog {
  id        String   @id @default(cuid())
  companyId String   @map("company_id")
  userId    String?  @map("user_id") @db.VarChar(128)
  action    String   @db.VarChar(64)
  resource  String   @db.VarChar(64)
  resourceId String? @map("resource_id") @db.VarChar(128)
  ipAddress String?  @map("ip_address") @db.VarChar(45)
  userAgent String?  @map("user_agent") @db.Text
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, createdAt])
  @@index([action, createdAt])
  @@index([resource, resourceId])
  @@map("audit_logs")
}

// TASK 6.2: Domain Management Model
model Domain {
  id                    String                    @id @default(cuid())
  companyId             String                    @map("company_id")
  domain                String                    @db.VarChar(253)
  status                DomainVerificationStatus  @default(PENDING)
  dkimStatus            DKIMVerificationStatus    @default(PENDING)
  dkimTokens            String[]                  @default([]) @map("dkim_tokens")
  spfRecord             String?                   @map("spf_record") @db.VarChar(255)
  dkimRecords           Json?                     @map("dkim_records")
  dmarcRecord           String?                   @map("dmarc_record") @db.VarChar(255)
  lastChecked           DateTime?                 @map("last_checked")
  lastVerified          DateTime?                 @map("last_verified")
  errorMessage          String?                   @map("error_message") @db.Text
  warmupConfig          Json?                     @map("warmup_config")
  isProductionReady     Boolean                   @default(false) @map("is_production_ready")
  createdAt             DateTime                  @default(now()) @map("created_at")
  updatedAt             DateTime                  @updatedAt @map("updated_at")

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, domain])
  @@index([companyId, status])
  @@index([domain])
  @@map("domains")
}
