// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENUMS
// ============================================

enum EmailStatus {
  PENDING
  ENQUEUED
  RECEIVED      // Pipeline: Job recebido
  VALIDATED     // Pipeline: Validações OK
  SENT_ATTEMPT  // Pipeline: Tentando enviar ao SES
  SENT
  FAILED
  RETRYING
  RETRY_SCHEDULED // Pipeline: Agendado para retry
}

enum EventType {
  CREATED
  ENQUEUED
  RECEIVED        // Pipeline: Job recebido
  VALIDATED       // Pipeline: Validado
  SENT_ATTEMPT    // Pipeline: Tentativa de envio
  PROCESSING
  SENT
  FAILED
  RETRYING
  RETRY_SCHEDULED // Pipeline: Agendado para retry
  BOUNCED
  COMPLAINED
  DELIVERED
  VALIDATION_FAILED // Pipeline: Falha na validação
}

// TASK 6.2: Domain Management Enums
enum DomainVerificationStatus {
  PENDING
  VERIFIED
  FAILED
  TEMPORARY_FAILURE
}

enum DKIMVerificationStatus {
  PENDING
  VERIFIED
  FAILED
}

// TASK-023: Webhook System Enums
enum WebhookDeliveryStatus {
  PENDING
  SUCCESS
  FAILED
  RETRYING
}

// TASK-025: Batch Email Enums
enum BatchStatus {
  PROCESSING
  COMPLETED
  PARTIAL
  FAILED
}

// ===== NEW: ESP Self-Hosted Enums =====
enum EmailProvider {
  AWS_SES
  POSTAL_SMTP
  POSTAL_API
  MAILU_SMTP
  HARAKA_API
  CUSTOM_SMTP
}

enum IPPoolType {
  TRANSACTIONAL
  MARKETING
  DEDICATED
  SHARED
}

enum RateLimitScope {
  MX_DOMAIN
  CUSTOMER_DOMAIN
  IP_ADDRESS
  GLOBAL
}

enum SuppressionReason {
  HARD_BOUNCE
  SOFT_BOUNCE
  SPAM_COMPLAINT
  UNSUBSCRIBE
  ROLE_ACCOUNT
  BAD_DOMAIN
  MANUAL
}

enum DomainOnboardingStatus {
  DNS_PENDING
  DNS_CONFIGURED
  DKIM_PENDING
  DKIM_VERIFIED
  SPF_PENDING
  SPF_VERIFIED
  RETURN_PATH_PENDING
  RETURN_PATH_VERIFIED
  WARMUP_IN_PROGRESS
  PRODUCTION_READY
  FAILED
}

// ============================================
// MODELS
// ============================================

model Company {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique @db.VarChar(254) // TASK-036
  passwordHash String @map("password_hash") @db.VarChar(128) // TASK-036
  apiKey    String   @unique @map("api_key")
  apiKeyHash String  @unique @map("api_key_hash") @db.VarChar(128)
  apiKeyPrefix String @map("api_key_prefix") @db.VarChar(20)
  apiKeyCreatedAt DateTime @map("api_key_created_at")
  apiKeyExpiresAt DateTime @map("api_key_expires_at")
  lastUsedAt DateTime? @map("last_used_at")
  isActive  Boolean  @default(true) @map("is_active")
  allowedIps String[] @default([]) @map("allowed_ips")
  rateLimitConfig Json? @map("rate_limit_config")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // ===== TASK-026: Multi-Tenant Fields =====

  // Domínio personalizado
  defaultFromAddress String?  @map("default_from_address") @db.VarChar(254)
  defaultFromName    String?  @map("default_from_name") @db.VarChar(100)
  domainId           String?  @map("domain_id")

  // Limites de envio
  dailyEmailLimit    Int      @default(1000) @map("daily_email_limit")
  monthlyEmailLimit  Int?     @map("monthly_email_limit")

  // Curadoria e Status
  isApproved         Boolean  @default(false) @map("is_approved")
  isSuspended        Boolean  @default(false) @map("is_suspended")
  suspensionReason   String?  @map("suspension_reason") @db.Text
  approvedAt         DateTime? @map("approved_at")
  approvedBy         String?  @map("approved_by") @db.VarChar(128)

  // Métricas em cache (atualizadas por cron job)
  bounceRate         Float    @default(0) @map("bounce_rate")
  complaintRate      Float    @default(0) @map("complaint_rate")
  lastMetricsUpdate  DateTime? @map("last_metrics_update")

  // Relations
  recipients   Recipient[]
  emailOutbox  EmailOutbox[]
  emailLogs    EmailLog[]
  idempotencyKeys IdempotencyKey[]
  auditLogs   AuditLog[]
  domains     Domain[] @relation("CompanyDomains")
  webhooks    Webhook[] // TASK-023
  recipientBlocklist RecipientBlocklist[] // TASK-024
  emailBatches EmailBatch[] // TASK-025

  // TASK-026: Domínio padrão

  @@index([isApproved, isSuspended], map: "idx_companies_approval_status")
  @@index([bounceRate], map: "idx_companies_bounce_rate")
  @@index([complaintRate], map: "idx_companies_complaint_rate")
  @@index([domainId], map: "idx_companies_domain_id")
  @@map("companies")
}

model Recipient {
  id            String   @id @default(cuid())
  companyId     String   @map("company_id")
  externalId    String?  @map("external_id")
  cpfCnpjHash   String?  @map("cpf_cnpj_hash") @db.VarChar(64)
  cpfCnpjEnc    String?  @map("cpf_cnpj_enc") // Encrypted CPF/CNPJ
  cpfCnpjSalt   String?  @map("cpf_cnpj_salt") // Salt for encryption
  razaoSocial   String?  @map("razao_social") @db.VarChar(150)
  nome          String?  @db.VarChar(120)
  email         String   @db.VarChar(254)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  // Relations
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  emailOutbox EmailOutbox[]
  emailLogs   EmailLog[]

  @@unique([companyId, externalId])
  // Composite indexes for optimal query performance
  @@index([companyId, cpfCnpjHash, deletedAt]) // Search by CPF/CNPJ hash
  @@index([companyId, email, deletedAt])       // Search by email with soft delete
  @@index([companyId, deletedAt, createdAt])   // List/pagination with soft delete
  @@map("recipients")
}

model EmailOutbox {
  id           String      @id @default(cuid())
  companyId    String      @map("company_id")
  recipientId  String?     @map("recipient_id")
  externalId   String?     @map("external_id") @db.VarChar(64)
  to           String      @db.VarChar(254)
  cc           String[]    @default([])
  bcc          String[]    @default([])
  subject      String      @db.VarChar(150)
  html         String      @db.Text
  replyTo      String?     @map("reply_to") @db.VarChar(254)
  headers      Json?
  tags         String[]    @default([])
  status       EmailStatus @default(PENDING)
  jobId        String?     @unique @map("job_id")
  requestId    String?     @map("request_id") @db.VarChar(128)
  attempts     Int         @default(0)
  lastError    String?     @map("last_error") @db.Text
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  enqueuedAt   DateTime?   @map("enqueued_at")
  processedAt  DateTime?   @map("processed_at")

  // TASK-025: Batch tracking
  batchId      String?     @map("batch_id")

  // Relations
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  recipient Recipient?  @relation(fields: [recipientId], references: [id], onDelete: SetNull)
  emailLog  EmailLog?
  batch     EmailBatch? @relation(fields: [batchId], references: [id], onDelete: SetNull)

  @@index([companyId, status])
  @@index([companyId, externalId])
  @@index([companyId, createdAt])
  @@index([recipientId])
  @@index([batchId], map: "idx_email_outbox_batch") // TASK-025
  // TASK-017: Composite index for dashboard queries
  // Optimizes: WHERE company_id = X AND status = Y ORDER BY created_at DESC
  // Used by dashboard email list, date range filters, and status-based queries
  @@index([companyId, status, createdAt(sort: Desc)], map: "idx_email_outbox_dashboard")
  @@map("email_outbox")
}

model EmailLog {
  id            String      @id @default(cuid())
  outboxId      String      @unique @map("outbox_id")
  companyId     String      @map("company_id")
  recipientId   String?     @map("recipient_id")
  to            String      @db.VarChar(254)
  subject       String      @db.VarChar(150)
  status        EmailStatus
  sesMessageId  String?     @unique @map("ses_message_id") @db.VarChar(128)
  errorCode     String?     @map("error_code") @db.VarChar(64)
  errorReason   String?     @map("error_reason") @db.Text
  attempts      Int         @default(0)
  durationMs    Int?        @map("duration_ms")
  requestId     String?     @map("request_id") @db.VarChar(128)
  createdAt     DateTime    @default(now()) @map("created_at")
  sentAt        DateTime?   @map("sent_at")
  failedAt      DateTime?   @map("failed_at")

  // TASK-024: SES Event Fields
  bounceType            String?   @map("bounce_type") @db.VarChar(32)
  bounceSubtype         String?   @map("bounce_subtype") @db.VarChar(64)
  complaintFeedbackType String?   @map("complaint_feedback_type") @db.VarChar(64)
  deliveryTimestamp     DateTime? @map("delivery_timestamp")

  // Relations
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  recipient   Recipient?   @relation(fields: [recipientId], references: [id], onDelete: SetNull)
  outbox      EmailOutbox  @relation(fields: [outboxId], references: [id], onDelete: Cascade)
  events      EmailEvent[]

  @@index([companyId, status])
  @@index([companyId, createdAt])
  @@index([recipientId])
  @@index([sesMessageId])
  // TASK 9.2: Sorting indexes for dashboard performance
  @@index([status, createdAt])
  @@index([sentAt])
  @@index([attempts, createdAt])
  @@index([durationMs])
  @@map("email_logs")
}

model EmailEvent {
  id          String    @id @default(cuid())
  emailLogId  String    @map("email_log_id")
  type        EventType
  metadata    Json?
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  emailLog EmailLog @relation(fields: [emailLogId], references: [id], onDelete: Cascade)

  @@index([emailLogId, createdAt])
  @@map("email_events")
}

model IdempotencyKey {
  id         String   @id @default(cuid())
  companyId  String   @map("company_id")
  key        String   @db.VarChar(128)
  outboxId   String   @map("outbox_id")
  requestHash String  @map("request_hash") @db.VarChar(64)
  createdAt  DateTime @default(now()) @map("created_at")
  expiresAt  DateTime @map("expires_at")

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, key])
  @@index([expiresAt])
  @@map("idempotency_keys")
}

model AuditLog {
  id        String   @id @default(cuid())
  companyId String   @map("company_id")
  userId    String?  @map("user_id") @db.VarChar(128)
  action    String   @db.VarChar(64)
  resource  String   @db.VarChar(64)
  resourceId String? @map("resource_id") @db.VarChar(128)
  ipAddress String?  @map("ip_address") @db.VarChar(45)
  userAgent String?  @map("user_agent") @db.Text
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, createdAt])
  @@index([action, createdAt])
  @@index([resource, resourceId])
  @@map("audit_logs")
}

// TASK 6.2: Domain Management Model
model Domain {
  id                    String                    @id @default(cuid())
  companyId             String                    @map("company_id")
  domain                String                    @db.VarChar(253)
  status                DomainVerificationStatus  @default(PENDING)
  dkimStatus            DKIMVerificationStatus    @default(PENDING)
  dkimTokens            String[]                  @default([]) @map("dkim_tokens")
  spfRecord             String?                   @map("spf_record") @db.VarChar(255)
  dkimRecords           Json?                     @map("dkim_records")
  dmarcRecord           String?                   @map("dmarc_record") @db.VarChar(255)
  lastChecked           DateTime?                 @map("last_checked")
  lastVerified          DateTime?                 @map("last_verified")
  errorMessage          String?                   @map("error_message") @db.Text

  // TASK-016: Domain warm-up configuration
  warmupEnabled         Boolean                   @default(false) @map("warmup_enabled")
  warmupStartDate       DateTime?                 @map("warmup_start_date")
  warmupConfig          Json?                     @map("warmup_config")

  isProductionReady     Boolean                   @default(false) @map("is_production_ready")
  createdAt             DateTime                  @default(now()) @map("created_at")
  updatedAt             DateTime                  @updatedAt @map("updated_at")

  // Relations
  company Company @relation("CompanyDomains", fields: [companyId], references: [id], onDelete: Cascade)
  onboarding DomainOnboarding?

  @@unique([companyId, domain])
  @@index([companyId, status])
  @@index([domain])
  @@map("domains")
}

// TASK-023: Webhook System
model Webhook {
  id        String   @id @default(cuid())
  companyId String   @map("company_id")
  url       String   @db.VarChar(2048)
  secret    String   @db.VarChar(64)
  events    String[] @default([])
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  company    Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  deliveries WebhookDelivery[]

  @@index([companyId, isActive], map: "idx_webhooks_company_active")
  @@map("webhooks")
}

model WebhookDelivery {
  id           String                @id @default(cuid())
  webhookId    String                @map("webhook_id")
  eventType    String                @map("event_type") @db.VarChar(64)
  payload      Json
  status       WebhookDeliveryStatus @default(PENDING)
  responseCode Int?                  @map("response_code")
  responseBody String?               @map("response_body") @db.Text
  attempts     Int                   @default(0)
  nextRetryAt  DateTime?             @map("next_retry_at")
  deliveredAt  DateTime?             @map("delivered_at")
  createdAt    DateTime              @default(now()) @map("created_at")

  // Relations
  webhook Webhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId, createdAt(sort: Desc)], map: "idx_webhook_deliveries_webhook")
  @@index([status, nextRetryAt], map: "idx_webhook_deliveries_status")
  @@map("webhook_deliveries")
}

// TASK-024: Recipient Blocklist (Hard Bounces & Complaints)
model RecipientBlocklist {
  id             String   @id @default(cuid())
  companyId      String   @map("company_id")
  email          String   @db.VarChar(254)
  reason         String   @db.VarChar(32) // 'hard_bounce', 'soft_bounce', 'complaint'
  bounceType     String?  @map("bounce_type") @db.VarChar(32)
  bounceSubtype  String?  @map("bounce_subtype") @db.VarChar(64)
  sesMessageId   String?  @map("ses_message_id") @db.VarChar(128)
  blockedAt      DateTime @default(now()) @map("blocked_at")
  metadata       Json?

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, email], map: "idx_blocklist_company_email")
  @@index([reason, blockedAt], map: "idx_blocklist_reason")
  @@map("recipient_blocklist")
}

// TASK-025: Email Batch Tracking
model EmailBatch {
  id             String      @id @default(cuid())
  companyId      String      @map("company_id")
  status         BatchStatus @default(PROCESSING)
  totalEmails    Int         @map("total_emails")
  processedCount Int         @default(0) @map("processed_count")
  successCount   Int         @default(0) @map("success_count")
  failedCount    Int         @default(0) @map("failed_count")
  metadata       Json?
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  completedAt    DateTime?   @map("completed_at")

  // Relations
  company Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  emails  EmailOutbox[]

  @@index([companyId, createdAt(sort: Desc)], map: "idx_email_batches_company")
  @@index([status, createdAt], map: "idx_email_batches_status")
  @@map("email_batches")
}

// ===== NEW: ESP Self-Hosted Models =====

// Suppressions - Substitui recipient_blocklist com mais features
model Suppression {
  id            String              @id @default(cuid())
  companyId     String?             @map("company_id") // null = global
  email         String              @db.VarChar(254)
  domain        String?             @db.VarChar(253)
  reason        SuppressionReason
  
  // Metadata
  source        String?             @db.VarChar(64) // bounce, complaint, manual
  bounceType    String?             @map("bounce_type") @db.VarChar(32)
  diagnosticCode String?            @map("diagnostic_code") @db.Text
  
  // Timing
  suppressedAt  DateTime            @default(now()) @map("suppressed_at")
  expiresAt     DateTime?           @map("expires_at") // Para soft bounces
  
  // Relations
  @@unique([companyId, email], map: "idx_suppression_company_email")
  @@index([reason, suppressedAt])
  @@index([domain, reason])
}

// Email Provider Configuration - Configuração de provedores de email
model EmailProviderConfig {
  id            String          @id @default(cuid())
  companyId     String?         @map("company_id") // null = global/default
  provider      EmailProvider   @default(AWS_SES)
  isActive      Boolean         @default(true) @map("is_active")
  priority      Int             @default(0) // 0 = highest priority
  
  // Configuration (JSON)
  config        Json            // Provider-specific config (credentials, etc)
  
  // IP Pool association
  ipPoolId      String?         @map("ip_pool_id")
  
  // Rate limiting
  maxPerSecond  Int?            @map("max_per_second")
  maxPerMinute  Int?            @map("max_per_minute")
  maxPerHour    Int?            @map("max_per_hour")
  maxPerDay     Int?            @map("max_per_day")
  
  // Tracking
  sentToday     Int             @default(0) @map("sent_today")
  lastUsedAt    DateTime?       @map("last_used_at")
  
  // Metadata
  name          String?         @db.VarChar(100)
  description   String?         @db.Text
  
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  
  // Relations
  @@index([companyId, isActive, priority])
  @@index([provider, isActive])
  @@map("email_provider_configs")
}

// IP Pools - Gerenciamento de IPs para envio
model IPPool {
  id            String      @id @default(cuid())
  name          String      @db.VarChar(100)
  type          IPPoolType
  ipAddresses   String[]    @map("ip_addresses") // IPs do pool
  isActive      Boolean     @default(true) @map("is_active")
  
  // Limites
  dailyLimit    Int?        @map("daily_limit")
  hourlyLimit   Int?        @map("hourly_limit")
  
  // Tracking
  sentToday     Int         @default(0) @map("sent_today")
  reputation    Float       @default(100.0) // 0-100
  
  // Warm-up
  warmupEnabled Boolean     @default(false) @map("warmup_enabled")
  warmupConfig  Json?       @map("warmup_config")
  
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  
  // Relations
  
  @@index([type, isActive])
  @@map("ip_pools")
}

// Rate Limits - Limites por MX, IP, etc
model RateLimit {
  id            String          @id @default(cuid())
  scope         RateLimitScope
  target        String          @db.VarChar(253) // MX domain, IP, etc
  
  // Limites
  perMinute     Int?            @map("per_minute")
  perHour       Int?            @map("per_hour")
  perDay        Int?            @map("per_day")
  
  // Janelas deslizantes (Redis)
  lastMinute    Int             @default(0) @map("last_minute")
  lastHour      Int             @default(0) @map("last_hour")
  lastDay       Int             @default(0) @map("last_day")
  
  // Tracking
  lastReset     DateTime        @default(now()) @map("last_reset")
  
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  
  @@unique([scope, target])
  @@index([scope, target, lastReset])
  @@map("rate_limits")
}

// DNS Records - Registros DNS para verificação
model DNSRecord {
  id            String                    @id @default(cuid())
  domainId      String                    @map("domain_id")
  recordType    String                    @db.VarChar(10) // TXT, CNAME, MX
  name          String                    @db.VarChar(253)
  value         String                    @db.Text
  priority      Int?
  isVerified    Boolean                   @default(false) @map("is_verified")
  lastChecked   DateTime?                 @map("last_checked")
  
  createdAt     DateTime                  @default(now()) @map("created_at")
  updatedAt     DateTime                  @updatedAt @map("updated_at")
  
  // Relations
  @@index([domainId, recordType])
  @@map("dns_records")
}

// Domain Onboarding - Status e progresso de onboarding de domínios
model DomainOnboarding {
  id            String                    @id @default(cuid())
  domainId      String                    @unique @map("domain_id")
  status        DomainOnboardingStatus    @default(DNS_PENDING)
  
  // Checklist items
  dkimGenerated Boolean                   @default(false) @map("dkim_generated")
  dkimPublic    String?                   @db.Text @map("dkim_public")
  dkimPrivate   String?                   @db.Text @map("dkim_private") // ENCRYPTED
  dkimSelector  String?                   @db.VarChar(63) @map("dkim_selector")
  
  spfRecord     String?                   @db.VarChar(512) @map("spf_record")
  returnPath    String?                   @db.VarChar(253) @map("return_path")
  trackingDomain String?                  @db.VarChar(253) @map("tracking_domain")
  
  // Auto-verification
  lastCheckAt   DateTime?                 @map("last_check_at")
  nextCheckAt   DateTime?                 @map("next_check_at")
  checkAttempts Int                       @default(0) @map("check_attempts")
  
  // Production readiness
  readyForProduction Boolean                @default(false) @map("ready_for_production")
  productionApprovedAt DateTime?            @map("production_approved_at")
  productionApprovedBy String?              @db.VarChar(128) @map("production_approved_by")
  
  createdAt     DateTime                  @default(now()) @map("created_at")
  updatedAt     DateTime                  @updatedAt @map("updated_at")
  
  // Relations
  domain        Domain                    @relation(fields: [domainId], references: [id], onDelete: Cascade)
  
  @@map("domain_onboarding")
}

// Email Tracking - Rastreamento de opens e clicks
model EmailTracking {
  id            String   @id @default(cuid())
  emailLogId    String   @map("email_log_id")
  trackingId    String   @unique @db.VarChar(64) @map("tracking_id")
  
  // Events
  openedAt      DateTime? @map("opened_at")
  openCount     Int       @default(0) @map("open_count")
  clickedAt     DateTime? @map("clicked_at")
  clickCount    Int       @default(0) @map("click_count")
  
  // Click details
  clickedUrls   Json?     @map("clicked_urls") // Array de { url, timestamp }
  
  // User agent
  userAgent     String?   @db.Text @map("user_agent")
  ipAddress     String?   @db.VarChar(45) @map("ip_address")
  
  createdAt     DateTime  @default(now()) @map("created_at")
  
  // Relations
  @@index([emailLogId])
  @@index([trackingId])
  @@map("email_tracking")
}

// Reputation Metrics - Métricas diárias de reputação
model ReputationMetric {
  id              String   @id @default(cuid())
  companyId       String?  @map("company_id") // null = global
  domainId        String?  @map("domain_id")
  ipPoolId        String?  @map("ip_pool_id")
  
  date            DateTime @db.Date
  
  // Métricas
  sent            Int      @default(0)
  delivered       Int      @default(0)
  bounced         Int      @default(0)
  bouncedHard     Int      @default(0) @map("bounced_hard")
  bouncedSoft     Int      @default(0) @map("bounced_soft")
  complained      Int      @default(0)
  opened          Int      @default(0)
  clicked         Int      @default(0)
  
  // Taxas calculadas
  bounceRate      Float    @default(0) @map("bounce_rate")
  complaintRate   Float    @default(0) @map("complaint_rate")
  openRate        Float    @default(0) @map("open_rate")
  clickRate       Float    @default(0) @map("click_rate")
  
  // Reputação
  reputationScore Float    @default(100) @map("reputation_score")
  
  createdAt       DateTime @default(now()) @map("created_at")
  
  // Relations
  @@unique([companyId, domainId, ipPoolId, date])
  @@index([date, companyId])
  @@map("reputation_metrics")
}
