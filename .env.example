# ==============================================================================
# EMAIL GATEWAY - Environment Variables
# ==============================================================================
# ⚠️  IMPORTANTE: Este é um arquivo de EXEMPLO. NUNCA commite credenciais reais!
#
# Setup:
# 1. Copie este arquivo: cp .env.example .env
# 2. Substitua todos os valores EXAMPLE por valores reais
# 3. Adicione .env ao .gitignore (já deve estar)
# 4. Para gerar chaves seguras: openssl rand -base64 32
# ==============================================================================

# ------------------------------------------------------------------------------
# Application
# ------------------------------------------------------------------------------
NODE_ENV=development                    # development | staging | production
API_PORT=3000                          # Porta da API REST
WORKER_PORT=3001                       # Porta do worker (health checks)

# API Configuration
API_PREFIX=v1                          # Prefixo da API (ex: /v1/email/send)

# ------------------------------------------------------------------------------
# Database (PostgreSQL)
# ------------------------------------------------------------------------------
# ⚠️  NUNCA commite connection strings de produção!
# Em produção, use secrets manager (AWS Secrets, HashiCorp Vault, Doppler, etc.)
#
# Formato: postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/email_gateway?schema=public"

# ------------------------------------------------------------------------------
# Redis (Queue & Cache)
# ------------------------------------------------------------------------------
# BullMQ usa Redis para gerenciar fila de emails
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=                         # Deixe vazio se sem senha (dev apenas)
REDIS_DB=0                             # Banco Redis (0-15)

# Alternativa: Use REDIS_URL para connection string completa
# REDIS_URL=redis://:password@localhost:6379/0

# ------------------------------------------------------------------------------
# BullMQ Queue Configuration
# ------------------------------------------------------------------------------
QUEUE_NAME=email:send                  # Nome da fila no Redis
QUEUE_CONCURRENCY=2                    # Workers processando simultaneamente
QUEUE_MAX_RETRIES=5                    # Máximo de tentativas por job

# Worker Configuration
WORKER_CONCURRENCY=16                  # Threads de processamento: min(CPU*2, 16)

# ------------------------------------------------------------------------------
# AWS SES (Simple Email Service)
# ------------------------------------------------------------------------------
# ⚠️  NUNCA commite credenciais AWS reais!
#
# 📌 DESENVOLVIMENTO LOCAL - Escolha uma opção:
#   Opção 1 (Recomendada): Use AWS CLI profile
#     - Configure: aws configure --profile email-gateway
#     - Use: AWS_PROFILE=email-gateway npm run dev
#
#   Opção 2: Use variáveis de ambiente (abaixo)
#     - Apenas para testes locais
#     - NUNCA commite estas credenciais
#
# 🚀 PRODUÇÃO - Use IAM Roles (NUNCA hardcode keys):
#   - ECS Task Role
#   - EC2 Instance Profile
#   - Lambda Execution Role
#   - EKS Service Account (IRSA)
#
# Os valores abaixo são EXEMPLOS OFICIAIS DA AWS e NÃO FUNCIONAM:
# Referência: https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html

AWS_REGION=us-east-1                   # Região SES: us-east-1, us-west-2, eu-west-1, etc.

# ⚠️  Estes são exemplos da documentação oficial da AWS - NÃO FUNCIONAM!
AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

# SES Configuration
SES_FROM_ADDRESS=noreply@example.com   # Email verificado no SES (required)
SES_REPLY_TO_ADDRESS=support@example.com
SES_CONFIGURATION_SET_NAME=email-gateway # Nome do Configuration Set (opcional)

# SES Sandbox Mode (Development)
# SES sandbox só permite enviar para emails verificados
# Para produção, solicite "SES Production Access" no AWS Console

# ------------------------------------------------------------------------------
# Security & Authentication
# ------------------------------------------------------------------------------
# API Key Configuration
API_KEY_HEADER=x-api-key               # Nome do header para API key

# CORS Configuration
CORS_ORIGIN=http://localhost:3000      # Origens permitidas (use * com cuidado)
                                       # Em produção: https://app.example.com

# IP Whitelist (opcional)
ALLOWED_IPS=127.0.0.1,::1              # IPs permitidos (deixe vazio para desabilitar)

# ------------------------------------------------------------------------------
# Encryption (CRITICAL - Required for PII Protection)
# ------------------------------------------------------------------------------
# ⚠️  OBRIGATÓRIO para proteger CPF/CNPJ no banco de dados!
#
# Como gerar:
#   openssl rand -base64 32
#   node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
#
# Requisitos:
#   - Mínimo 32 caracteres (256 bits)
#   - Alta entropia (use geradores criptográficos)
#   - NUNCA use valores de exemplo/placeholder
#   - Guarde em secret manager em produção
#
# 🔒 PRODUÇÃO: Use AWS Secrets Manager, HashiCorp Vault, ou equivalente

ENCRYPTION_KEY=                        # ⚠️  OBRIGATÓRIO - Gere com: openssl rand -base64 32

# Optional: Separate salt secret (uses ENCRYPTION_KEY if not set)
ENCRYPTION_SALT_SECRET=

# Encryption Performance Monitoring
ENCRYPTION_SLOW_THRESHOLD_MS=200       # Log warning se encryption > 200ms

# ------------------------------------------------------------------------------
# Logging
# ------------------------------------------------------------------------------
LOG_LEVEL=info                         # debug | info | warn | error
LOG_FORMAT=json                        # json | pretty (use json em produção)

# ------------------------------------------------------------------------------
# Rate Limiting & Throttling
# ------------------------------------------------------------------------------
# API Rate Limits (por IP)
RATE_LIMIT_TTL=60                      # Janela de tempo (segundos)
RATE_LIMIT_LIMIT=100                   # Máximo de requests na janela

# Payload Limits
MAX_PAYLOAD_SIZE=1mb                   # Tamanho máximo do body

# ------------------------------------------------------------------------------
# Retry & Backoff Configuration
# ------------------------------------------------------------------------------
# Configuração de retry para falhas transientes
RETRY_BASE_DELAY=1000                  # Delay inicial (ms)
RETRY_MAX_DELAY=60000                  # Delay máximo (ms)
RETRY_EXPONENTIAL_FACTOR=2             # Fator de multiplicação

# ------------------------------------------------------------------------------
# Health Check Configuration
# ------------------------------------------------------------------------------
# SES Quota Monitoring
SES_QUOTA_WARNING_THRESHOLD=0.8        # Alerta em 80% da quota
SES_QUOTA_CRITICAL_THRESHOLD=0.95      # Crítico em 95% da quota

# ------------------------------------------------------------------------------
# Testing & Development
# ------------------------------------------------------------------------------
# Chaos Engineering (apenas dev/staging)
# CHAOS_SES_429=false                   # Simula throttling do SES
# CHAOS_DB_SLOW=false                   # Simula latência do banco
# CHAOS_REDIS_DOWN=false                # Simula Redis indisponível

# Test Database (E2E tests)
# DATABASE_TEST_URL="postgresql://postgres:postgres@localhost:5432/email_gateway_test?schema=public"

# ------------------------------------------------------------------------------
# Observability (Opcional)
# ------------------------------------------------------------------------------
# Metrics & Monitoring
# PROMETHEUS_PORT=9090
# GRAFANA_URL=http://localhost:3001

# Tracing (OpenTelemetry)
# OTEL_ENABLED=false
# OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318
# OTEL_SERVICE_NAME=email-gateway

# Sentry Error Tracking
# SENTRY_DSN=
# SENTRY_ENVIRONMENT=development
# SENTRY_TRACES_SAMPLE_RATE=0.1

# ------------------------------------------------------------------------------
# Feature Flags (Opcional)
# ------------------------------------------------------------------------------
# FEATURE_CIRCUIT_BREAKER=true
# FEATURE_ENCRYPTION_MONITORING=true
# FEATURE_DNS_VERIFICATION=true

# ------------------------------------------------------------------------------
# TASK-021: DLQ Monitoring & Admin (REQUIRED)
# ------------------------------------------------------------------------------
# Dead Letter Queue Management
# Endpoints: /admin/dlq

# Admin API Key (REQUIRED for DLQ management)
# ⚠️  CRITICAL: Generate strong key and keep secure!
# Como gerar: openssl rand -base64 32
ADMIN_API_KEY=                         # ⚠️  OBRIGATÓRIO - Protege endpoints admin

# DLQ Alert Thresholds
DLQ_ALERT_THRESHOLD=10                 # Alerta se DLQ > 10 jobs
DLQ_CRITICAL_THRESHOLD=100             # Crítico se DLQ > 100 jobs
DLQ_MAX_AGE_HOURS=24                  # Alerta se job > 24h no DLQ

# Slack Alerts (Opcional mas Recomendado)
# Configure webhook em: https://api.slack.com/messaging/webhooks
# SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/WEBHOOK/URL

# Admin Panel URLs (para links em alertas)
API_BASE_URL=http://localhost:3000     # URL base da API
GRAFANA_URL=http://localhost:3001      # URL do Grafana

# DLQ Monitoring
DLQ_CHECK_INTERVAL_MS=300000          # Check DLQ a cada 5 minutos (300000ms)
DLQ_CLEANUP_DAYS=7                     # Limpar jobs com > 7 dias no DLQ

# ------------------------------------------------------------------------------
# TASK-026: AWS Secrets Manager Integration (Production Security)
# ------------------------------------------------------------------------------
# 🔐 AWS Secrets Manager provides secure storage for sensitive credentials:
#   - Encryption at rest using AWS KMS
#   - Automatic secret rotation
#   - IAM-based access control
#   - Audit logging via CloudTrail
#   - Secret versioning and rollback
#
# Setup Instructions:
#   1. Create secrets in AWS Secrets Manager:
#      aws secretsmanager create-secret \
#        --name email-gateway/encryption-key \
#        --secret-string "$(openssl rand -base64 32)"
#
#      aws secretsmanager create-secret \
#        --name email-gateway/encryption-salt \
#        --secret-string "$(openssl rand -base64 32)"
#
#      aws secretsmanager create-secret \
#        --name email-gateway/admin-api-key \
#        --secret-string "$(openssl rand -base64 32)"
#
#   2. Grant IAM permissions to your EC2/ECS/Lambda role:
#      {
#        "Effect": "Allow",
#        "Action": [
#          "secretsmanager:GetSecretValue",
#          "secretsmanager:DescribeSecret"
#        ],
#        "Resource": "arn:aws:secretsmanager:us-east-1:*:secret:email-gateway/*"
#      }
#
#   3. Enable Secrets Manager in production:
#      NODE_ENV=production (automatically enables)
#      OR
#      USE_SECRETS_MANAGER=true (force enable in staging)

# Enable AWS Secrets Manager integration
# - In production: Automatically enabled (NODE_ENV=production)
# - In staging: Set USE_SECRETS_MANAGER=true
# - In development: Leave false to use environment variables
USE_SECRETS_MANAGER=false              # Set to 'true' to enable in non-production

# AWS Region for Secrets Manager
# NOTE: This should match your SES region for consistency
AWS_REGION=us-east-1                   # us-east-1, us-west-2, eu-west-1, etc.

# Secret Names in AWS Secrets Manager
# These are the default names - override only if using custom naming
# SECRET_NAME_ENCRYPTION_KEY=email-gateway/encryption-key
# SECRET_NAME_ENCRYPTION_SALT=email-gateway/encryption-salt
# SECRET_NAME_DATABASE_URL=email-gateway/database-url
# SECRET_NAME_ADMIN_API_KEY=email-gateway/admin-api-key

# IAM Role (Production)
# In production, use IAM roles instead of access keys:
# - EC2: Instance Profile
# - ECS: Task Role
# - Lambda: Execution Role
# - EKS: Service Account (IRSA)
# The AWS SDK will automatically use the IAM role credentials.

# Development Fallback
# If USE_SECRETS_MANAGER=false, the application falls back to:
#   - ENCRYPTION_KEY (from env)
#   - ENCRYPTION_SALT_SECRET (from env)
#   - DATABASE_URL (from env)
#   - ADMIN_API_KEY (from env)

# ==============================================================================
# FIM - Email Gateway Environment Variables
# ==============================================================================
