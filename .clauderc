# Claude Code Configuration
# Este arquivo instrui agentes de IA sobre regras do projeto

## üö® REGRAS OBRIGAT√ìRIAS - LEIA ANTES DE QUALQUER A√á√ÉO

Antes de criar commits, branches ou PRs, voc√™ DEVE:

1. Ler e seguir: CONTRIBUTING.md
2. Ler e seguir: .github/pull_request_template.md
3. Ler e seguir: docs/PR_REVIEW_RULES.md
4. Ler e seguir: docs/PR_ADJUSTMENTS.md
5. Usar template: task/TEMPLATE-PR-TASK.md para itens fora de escopo

## Branch Naming (OBRIGAT√ìRIO)
- feature/* (nova funcionalidade)
- fix/* (corre√ß√£o de bug)
- hotfix/* (corre√ß√£o urgente)
- refactor/* (refatora√ß√£o)
- chore/* (manuten√ß√£o)
- docs/* (documenta√ß√£o)

## Commit Message (OBRIGAT√ìRIO)
Usar Conventional Commits:
<tipo>(<escopo>): <descri√ß√£o>

Tipos permitidos: feat, fix, chore, docs, style, refactor, perf, test, build, ci

Adicionar ao final de TODOS os commits:

Co-Authored-By: nome do agente se n√£o houver usar Dev1 

## Seguran√ßa (CR√çTICO)
- NUNCA commitar .env
- NUNCA expor secrets/API keys
- SEMPRE verificar .gitignore
- SEMPRE verificar git status antes de commitar

## Pull Request (OBRIGAT√ìRIO)
- Preencher TODO o template em .github/pull_request_template.md
- Documentar impacto t√©cnico (migrations, env vars, breaking changes)
- Documentar riscos e plano de rollback
- Registrar itens fora de escopo em /task/PR<numero>-TASK<id>.md

## Workflow Actions
- semantic-pr.yml valida t√≠tulo da PR (Conventional Commits)
- labeler.yml aplica labels automaticamente
- docs-validation.yml valida documenta√ß√£o

## NUNCA
- Fazer scope creep (adicionar coisas fora do escopo)
- Commitar sem valida√ß√£o manual
- Criar PR sem preencher template completo
- Ignorar coment√°rios Critical ou Moderate

## SEMPRE
- Manter escopo aderente
- Validar manualmente antes de commitar
- Documentar decis√µes t√©cnicas
- Registrar tech debt em /task quando necess√°rio
